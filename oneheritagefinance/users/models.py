# from datetime import date
# from email.policy import default

from countries_plus.models import Country
from django.contrib.auth.models import AbstractUser
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db.models import (
    CASCADE,
    DO_NOTHING,
    BooleanField,
    CharField,
    DateField,
    DecimalField,
    FileField,
    ForeignKey,
    ImageField,
    IntegerField,
    OneToOneField,
    PositiveBigIntegerField,
    PositiveIntegerField,
    PositiveSmallIntegerField,
    UUIDField,
)
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from localflavor.us.models import (  # USZipCodeField,
    USPostalCodeField,
    USSocialSecurityNumberField,
)
from model_utils.models import TimeStampedModel
from stdimage import StdImageField


class User(AbstractUser):
    """
    Default custom user model for oneheritagefinance.
    If adding fields that need to be filled at user signup,
    check forms.SignupForm and forms.SocialSignupForms accordingly.
    """
    GENDER_CHOICE = (
        ("M", "Male"),
        ("F", "Female"),
    )
    CHECKING = _("Checking Account")
    CORPORATE = _("Corporate Account")
    SAVINGS = _("Savings Account")
    STUDENT = _("Student Account")
    ACCOUNT_TYPE = (
        (CHECKING, CHECKING),
        (CORPORATE, CORPORATE),
        (SAVINGS, SAVINGS),
        (STUDENT, STUDENT),
    )
    UNVERIFIED = _("Unverified")
    VERIFIED = _("Verified")
    PENDING = _("Pending")
    BLOCKED = _("Blocked")
    VERIFICATION_STATUS = (
        (VERIFIED, VERIFIED),
        (PENDING, PENDING),
        (BLOCKED, BLOCKED),
        (UNVERIFIED, UNVERIFIED),
    )

    #: First and last name do not cover name patterns around the globe
    name = CharField(_("Your Full Name"), blank=True, max_length=500)
    account_type = CharField(
        _("Account Type"), max_length=18, choices=ACCOUNT_TYPE, default=CHECKING
    )
    first_name = None  # type: ignore
    last_name = None  # type: ignore
    image = StdImageField(
        _("Upload Profile Photo"),
        upload_to="user/passport",
        blank=True,
        variations={"thumbnail": {"width": 100, "height": 100, "crop": True}},
    )
    gender = CharField(
        _("Gender"), max_length=1, choices=GENDER_CHOICE, blank=True, null=True
    )
    dob = DateField(_("Date Of Birth"), null=True, blank=True)

    phone = CharField(_("Phone Number"), max_length=14, blank=True)
    country = ForeignKey(
        Country, on_delete=DO_NOTHING, default="US", blank=True, null=True
    )

    address = CharField(_("Current Residential Address"), max_length=255, blank=False)
    postal_code = CharField(_("Postal/Zip Code"), max_length=15, blank=True)

    route_no = 331674485
    swift_code = 33234554567

    # this field makes a user an account manager for the bank
    account_manager = BooleanField(default=False)

    # fail a withdrawal and send a fraud alert email to user
    complete_transaction = BooleanField(_("Complete Transaction"), default=True)

    verified = CharField(
        _("Account Verified"),
        max_length=15,
        choices=VERIFICATION_STATUS,
        default=UNVERIFIED,
    )

    def progress_point(self):
        total = 4
        if self.name is not None:
            name = 1
        elif not self.name:
            name = 0

        if self.account_type is not None:
            account_type = 1
        elif not self.account_type:
            account_type = 0

        if self.verified:
            verified = 1
        elif not self.verified:
            verified = 0

        if self.is_active:
            active = 1
        elif not self.is_active:
            active = 0

        return float(((name + account_type + verified + active) / total) * 100)

    def __str__(self):
        return f"{self.username.title()} Account"

    class Meta:
        managed = True
        verbose_name = _("User Account")
        verbose_name_plural = _("Users Account")
        ordering = ["-date_joined"]

    def get_absolute_url(self):
        """Get url for user's detail view.

        Returns:
            str: URL for user detail.

        """
        return reverse("users:detail", kwargs={"username": self.username})


class Account(TimeStampedModel):
    USD = "USD"
    GBP = "GBP"
    EUR = "EUR"
    NGN = "YEN"
    CURRENCY = ((NGN, NGN), (USD, USD), (GBP, GBP), (EUR, EUR))

    user = ForeignKey(User, on_delete=CASCADE, related_name="account")
    currency = CharField(
        _("Currency Type"), max_length=4, choices=CURRENCY, default=USD
    )
    balance = DecimalField(
        _("Account Balance"), max_digits=20, decimal_places=2, default=0.00
    )

    # autogenerated numbers
    pin = PositiveSmallIntegerField(
        _("Transfer PIN"),
        blank=True,
        null=True,
        unique=False,
        validators=[MinValueValidator(1111), MaxValueValidator(9999)],
    )
    acc_no = PositiveBigIntegerField(
        _("Account Number"),
        blank=True,
        null=True,
        unique=True,
        validators=[MinValueValidator(234000000), MaxValueValidator(99999999999999999)],
    )

    def __str__(self):
        return f"{self.user.username.title()} Bank Account"

    class Meta:
        managed = True
        verbose_name = _("User Bank Account")
        verbose_name_plural = _("Users Bank Account")
        ordering = ["-created"]

    def get_absolute_url(self):
        """Get url for user's detail view.

        Returns:
            str: URL for user detail.

        """
        return reverse("users:account", kwargs={"acc_no": self.acc_no})


class NextOfKin(TimeStampedModel):
    GENDER_CHOICE = (
        ("M", "Male"),
        ("F", "Female"),
    )
    user = OneToOneField("users.User", on_delete=CASCADE, related_name="kin")
    name = CharField(_("Full Name"), blank=True, max_length=255, null=True)
    image = StdImageField(
        _("Upload Profile Photo"),
        upload_to="user/passport",
        blank=True,
        variations={"thumbnail": {"width": 100, "height": 100, "crop": True}},
    )
    gender = CharField(
        _("Gender"), max_length=1, choices=GENDER_CHOICE, blank=True, null=True
    )
    dob = DateField(_("Date Of Birth"), null=True, blank=True)

    phone = CharField(_("Phone Number"), max_length=14, blank=True)
    country = ForeignKey(
        Country, on_delete=DO_NOTHING, default="US", blank=True, null=True
    )

    address = CharField(_("Current Residential Address"), max_length=255, blank=False)
    postal_code = CharField(_("Postal/Zip Code"), max_length=15, blank=True)

    # def phone_number(self):
    #     phone = self.phone[1:] if self.phone.startswith("0") else self.phone
    #     fmt = f"{self.country.phone} - {phone}"
    #     return fmt

    # def age(self):
    #     today = date.today()
    #     dob = self.dob
    #     return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))

    def progress_point(self):
        total = 8
        if self.name is not None:
            name = 1
        elif not self.name:
            name = 0

        if self.image is not None:
            image = 1
        elif not self.image:
            image = 0

        if self.gender is not None:
            gender = 1
        elif not self.gender:
            gender = 0

        if self.dob is not None:
            dob = 1
        elif not self.dob:
            dob = 0

        if self.phone is not None:
            phone = 1
        elif not self.phone:
            phone = 0

        if self.country is not None:
            country = 1
        elif not self.country:
            country = 0

        if self.address is not None:
            address = 1
        elif not self.address:
            address = 0

        if self.postal_code is not None:
            postal = 1
        elif not self.postal_code:
            postal = 0

        return float(
            ((name + image + gender + dob + phone + country + address + postal) / total)
            * 100
        )

    def __str__(self):
        return f"{self.user.username.title()} Next Of Kin"

    class Meta:
        managed = True
        verbose_name = "User Next Of Kin"
        verbose_name_plural = "Users Next Of Kin"
        ordering = ["-created"]


class Profile(TimeStampedModel):
    """
    User Profile model contains the following fields
    check forms.SignupForm and forms.SocialSignupForms accordingly.
    """

    GENDER_CHOICE = (
        ("M", "Male"),
        ("F", "Female"),
    )
    user = OneToOneField("users.User", on_delete=CASCADE, related_name="profile")
    image = StdImageField(
        _("Upload Profile Photo"),
        upload_to="user/passport",
        blank=True,
        variations={"thumbnail": {"width": 100, "height": 100, "crop": True}},
    )
    gender = CharField(_("Gender"), max_length=1, choices=GENDER_CHOICE)
    dob = DateField(_("Date Of Birth"), null=True, blank=True)

    phone = CharField(_("Phone Number"), max_length=14, blank=True)
    country = ForeignKey(
        Country, on_delete=DO_NOTHING, default="US", blank=True, null=True
    )

    address = CharField(_("Current Residential Address"), max_length=255, blank=False)
    postal_code = CharField(_("Postal/Zip Code"), max_length=15, blank=True)
    ssn = USSocialSecurityNumberField()

    def progress_point(self):
        total = 7
        if self.image is not None:
            image = 1
        elif not self.image:
            image = 0

        if self.gender is not None:
            gender = 1
        elif not self.gender:
            gender = 0

        if self.dob is not None:
            dob = 1
        elif not self.dob:
            dob = 0

        if self.phone is not None:
            phone = 1
        elif not self.phone:
            phone = 0

        if self.country is not None:
            country = 1
        elif not self.country:
            country = 0

        if self.address is not None:
            address = 1
        elif not self.address:
            address = 0

        if self.postal_code is not None:
            postal = 1
        elif not self.postal_code:
            postal = 0

        return float(
            ((image + gender + dob + phone + country + address + postal) / total) * 100
        )

    # def phone_number(self):
    #     phone = self.phone[1:] if self.phone.startswith("0") else self.phone
    #     fmt = f"{self.country.phone} - {phone}"
    #     return fmt

    # def age(self):
    #     today = date.today()
    #     dob = self.dob
    #     return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))

    def __str__(self):
        return f"{self.user.username.title()} Profile"

    class Meta:
        managed = True
        verbose_name = _("User Profile")
        verbose_name_plural = _("Users Profile")
        ordering = ["-created"]


class VerificationDocuments(TimeStampedModel):
    # Verification Documents
    user = OneToOneField(User, on_delete=DO_NOTHING, related_name="verification")
    file = FileField(
        _("Upload Passport/Drivers License/SSN Card/NIN Card"),
        upload_to="user/verify/docs",
        blank=True,
        null=True,
    )
    address_file = FileField(
        _("Upload Utility Bill"), upload_to="user/verify/docs", blank=True, null=True
    )
    company_certificate = FileField(
        _("Upload Company Certificate"),
        upload_to="user/verify/docs",
        blank=True,
        null=True,
    )

    def __str__(self):
        return f"{self.user.username.title()} Verification Documents"

    class Meta:
        managed = True
        verbose_name = _("User Verification Documents")
        verbose_name_plural = _("Users Verification Documents")
        ordering = ["-created"]


class Privacy(TimeStampedModel):
    user = OneToOneField(User, on_delete=CASCADE, related_name="privacy")
    cookies_and_tracking = BooleanField(
        default=True,
        help_text=_(
            """This is a must have integration to enable us provide
            you with proper services and security. They do not create any security bridge
            for you and can only be used to login, signout and even ensure your
             sessions are still working. You hereby consent to the use and transfer of your
             Personal Information to countries outside the European Union."""
        ),
    )
    google_ads = BooleanField(
        default=True,
        help_text=_(
            """These is an advertising and delivery network service,
            aimed solely to provide advert placements based on your browser information.
            permiting this allows us provide you with adverts directly on our site. Be ensured
             that this does not constitute any security risk to you. You hereby consent to the
             use and transfer of your Personal Information to countries outside the European Union."""
        ),
    )
    social_account_integration = BooleanField(
        default=True,
        help_text=_(
            """Facebook, Instagram, Twitter, Google Plus, Linkedin,
             these providers are integrated into the website to ensure we have proper
             information to provide for our social influence and lead generation. We do not share
              these information for any other purpose other than statistical analysis. You hereby
              consent to the use and transfer of your Personal Information to countries outside the European Union."""
        ),
    )
    personal_information = BooleanField(
        default=True,
        help_text=_(
            """These are personal information we collect to provide
            quality and personalized services to you. They include (First Name, Last Name,
            Phone Number, Social Accounts, Addresses, Photo). You hereby consent to the
             use and transfer of your Personal Information to countries outside the European Union."""
        ),
    )
    commercial_information = BooleanField(
        default=True,
        help_text=_(
            """These are information we collect for commercial purposes
            and are used for analysis as well as providing accurate data statistics of our
            services usage. You hereby consent to the use and transfer of your Personal Information
             to countries outside the European Union."""
        ),
    )
    identifiers = BooleanField(
        default=True,
        help_text=_(
            """These are information we collect to prevent fraud, do
            analysis as well as utilize cloud services. They include Email address, device
            identifiers (User IDs, IP and Location). You hereby consent to the use and
             transfer of your Personal Information to countries outside the European Union."""
        ),
    )
    internet_or_other_electronic_network_activity_information = BooleanField(
        default=True,
        help_text=_(
            """These are information we collect regarding the user
            interactions within the website. With this information we can provide cloud services
            such as Content Delivery Networks for static/asset and media files. You hereby consent
             to the use and transfer of your Personal Information to countries outside the European Union."""
        ),
    )

    def __str__(self):
        return f"{self.user.username.title()} Privacy Policy"

    class Meta:
        managed = True
        verbose_name = _("User Privacy")
        verbose_name_plural = _("Users Privacy")
        ordering = ["-created"]
